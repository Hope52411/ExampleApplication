#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val; // named pipe
  }
  if (port >= 0) {
    return port; // port number
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = server ? (typeof server.address() === 'string' ? 'Pipe ' + server.address() : 'Port ' + server.address().port) : 'unknown';
  app.set("port", https_port);
  console.log(`HTTPS server is running on port ${https_port}`);
  
  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server listening on ' + bind);
}

/**
 * Set ports
 */
var port = normalizePort(process.env.PORT || '8080');
var https_port = normalizePort(process.env.PORT_HTTPS || 8443);
var server;

if (process.env.ENV !== "DEV") {
  // Read private key and certificate (Ensure these files exist)
  try {
    var privateKey = fs.readFileSync('privatekey.pem', "utf8");
    var certificate = fs.readFileSync('server.crt', "utf8");

    var options = {
      key: privateKey,
      cert: certificate
    };

    app.set("port", https_port);

    /**
     * Create HTTPS server.
     */
    server = https.createServer(options, app).listen(https_port, function () {
      console.log('Server running securely on port ' + https_port);
    });

    /**
     * Redirect HTTP to HTTPS
     */
    http.createServer(function (req, res) {
      res.writeHead(301, { "Location": "https://" + req.headers['host'].split(':')[0] + ":" + https_port + req.url });
      console.log("Redirecting HTTP request to >> ");
      console.log("https://" + req.headers['host'].split(':')[0] + ":" + https_port + req.url);
      res.end();
    }).listen(port);

  } catch (err) {
    console.error("Error reading SSL certificate or private key:", err.message);
    process.exit(1);
  }

} else {
  /**
   * Create HTTP server.
   */
  server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
